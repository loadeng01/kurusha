import requests
import telebot
from decouple import config
from django.http import Http404
from django.shortcuts import get_object_or_404

from apps.order.models import Order
from apps.tg.models import update_feedback
from telebot import types

TOKEN = config('TOKEN')
bot = telebot.TeleBot(TOKEN)
yandex_token = config('YANDEX_TOKEN')


def geocode(place_name):
    api_key = yandex_token
    base_url = "https://geocode-maps.yandex.ru/1.x/"

    params = {
        'apikey': api_key,
        'format': 'json',
        'geocode': place_name,
    }

    try:
        response = requests.get(base_url, params=params)
        data = response.json()

        if data['response']['GeoObjectCollection']['metaDataProperty']['GeocoderResponseMetaData']['found'] > 0:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            coordinates = data['response']['GeoObjectCollection']['featureMember'][0]['GeoObject']['Point']['pos']
            return tuple(map(float, coordinates.split()))
        else:
            return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –Ø–Ω–¥–µ–∫—Å.–ì–µ–æ–∫–æ–¥–µ—Ä—É: {e}")
        return None


@bot.message_handler(commands=['start'])
def message_send(message):
    bot.reply_to(message, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –∫—É—Ä—å–µ—Ä—Å–∫—É—é —Å–ª—É–∂–±—É –¥–æ—Å—Ç–∞–≤–∫–∏! üööüí® –ù–∏–∂–µ –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É,"
                          "—Ç–∞–º –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å –≤–∞–∂–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ù–∞—á–Ω–µ–º –≤–º–µ—Å—Ç–µ"
                          "—Å–¥–µ–ª–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É –±—ã—Å—Ç—Ä–æ–π –∏ —É–¥–æ–±–Ω–æ–π! üì¶üíº")


@bot.message_handler(commands=['help'])
def message_send(message):
    help_text = (
        "–≠—Ç–æ –±–æ—Ç –∫—É—Ä—å–µ—Ä—Å–∫–æ–π —Å–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.\n"
        "/help - –ü–æ–ª—É—á–∏—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏.\n"
        "/orders - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã.\n"
        "/contact - –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.\n"
        "/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏–ª–∏ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å."
    )

    bot.reply_to(message, help_text)


@bot.message_handler(commands=['contact'])
def message_send(message):
    contact_text = (
        "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +996552590770\n"
        "Telegram: @trueBella"
    )
    bot.reply_to(message, contact_text)


user_states = {}


@bot.message_handler(commands=['feedback'])
def start_feedback(message):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "waiting_for_feedback"
    user_states[message.chat.id] = "waiting_for_feedback"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    bot.reply_to(message, "–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "waiting_for_feedback")
def handle_feedback(message):
    user_id = int(message.from_user.id)
    user_feedback = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_feedback(user_id, user_feedback)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states[message.chat.id] = None

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å.")


global orders
global order_list


@bot.message_handler(commands=['orders'])
def message_send(message):
    api_url = 'http://16.170.221.153/api/order/orders/'
    response = requests.get(api_url)
    if response.status_code == 200:

        orders = response.json()
        if orders:
            order_list = []
            for order in orders:
                order_list.append([order['user'], order['address']])
                formatted_order = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order_list[-1][0]}, –ê–¥—Ä–µ—Å: {order_list[-1][1]}'
                markup = types.InlineKeyboardMarkup(row_width=1)
                button_data = f'order_{order["id"]}'
                print(f"Button Data: {button_data}")
                button = types.InlineKeyboardButton("take", callback_data=f'{order["id"]}')
                markup.add(button)
                bot.send_message(message.chat.id, f'–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n{formatted_order}', reply_markup=markup)
        else:
            bot.send_message(message.chat.id, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.')
    else:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')


@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    try:
        order_id = call.data
        queryset = Order.objects.get(id=order_id)
        queryset.status = 'completed'
        queryset.save()
        bot.send_message(call.chat.id, f"–ó–∞–∫–∞–∑ {order_id} –≤–∑—è—Ç –∏ –æ–±–Ω–æ–≤–ª–µ–Ω!\n")
        coordinates = get_coordinates_from_place(queryset.address)

        if coordinates:
            latitude, longitude = coordinates

            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞—Å—Å—á–µ—Ç–æ–º –º–∞—Ä—à—Ä—É—Ç–∞
            maps_link = f"https://yandex.ru/maps/?rtext={latitude},{longitude}&rtt=auto"

            bot.send_message(call.chat.id, f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∞–¥—Ä–µ—Å–∞ '{queryset.address}': ({latitude}, {longitude})\n"
                                           f"–°—Å—ã–ª–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã: {maps_link}")
        else:
            bot.send_message(call.chat.id, f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∞–¥—Ä–µ—Å–∞ '{queryset.address}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except Http404:
        bot.send_message(call.chat.id, f"–ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!\n")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–±—ç–∫–∞: {e}")


def get_coordinates_from_place(place_name):
    try:
        coordinates = geocode(place_name)

        if coordinates:
            latitude, longitude = coordinates
            print(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –º–µ—Å—Ç–∞ '{place_name}': ({latitude}, {longitude})")

        else:
            return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
        return None

